package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"reflect"
	"strings"

	"go/types"

	"go/importer"

	"github.com/bluele/gen-validator/libs"
)

const (
	packageName = "libs"
	tagKey      = "validator"
)

var (
	modelNames = flag.String("model", "", "comma-separated list of model names; must be set")
	output     = flag.String("output", "", "output file name; default srcdir/<type>_validator.go")
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tvalidator [flags] -model T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tvalidator [flags[ -model T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("validator: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*modelNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	models := strings.Split(*modelNames, ",")

	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// path for target direcotry
	var (
		dir string
		g   Generator
	)

	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0])
	} else {
		dir = filepath.Dir(args[0])
		panic(dir)
		// TODO implemented error
	}

	// Print the header and package clause.
	g.Printf("// generated by gen-validator %s; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf("import \"github.com/bluele/gen-validator/libs\"\n")

	for _, modelName := range models {
		g.generate(modelName)
	}

	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_validator.go", models[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}

}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

type Generator struct {
	buf bytes.Buffer
	pkg *Package // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	modelName string            // Name of the model.
	methods   []*ValidateMethod // Accumulator for constant values of that type.

	errorFuncs map[string]map[string]string // Map object for Func which returns an error object
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string) {
	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	// 各種パッケージ中のgo fileを取り出します
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, name, text, 0)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file: parsedFile,
			pkg:  g.pkg,
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	// Type check the package.
	g.pkg.check(fs, astFiles)
}

func (g *Generator) generate(modelName string) {
	// values := make([]Value)
	methods := make([]*ValidateMethod, 0, 100)
	for _, file := range g.pkg.files {
		file.modelName = modelName
		file.methods = nil
		file.errorFuncs = make(map[string]map[string]string)
		if file.file != nil {
			ast.Inspect(file.file, file.funcDecl)
			ast.Inspect(file.file, file.genDecl)
			methods = append(methods, file.methods...)
		}
	}

	if len(methods) == 0 {
		log.Fatalf("no structs defined for struct %s", modelName)
	}

	for _, method := range methods {
		g.Printf(method.build())
	}
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		return true
	}

	for _, spec := range decl.Specs {
		typeDecl := spec.(*ast.TypeSpec)
		if f.modelName != typeDecl.Name.Name {
			continue
		}

		structDecl := typeDecl.Type.(*ast.StructType)
		vf := &ValidateMethod{Model: f.modelName}
		fields := structDecl.Fields.List
		for _, field := range fields {
			tagStr := reflect.StructTag(strings.Trim(field.Tag.Value, "`")).Get(tagKey)
			tags, err := parseTagString(tagStr)
			if err != nil {
				panic(err)
			}
			fieldName := field.Names[0].Name
			mp, ok := f.errorFuncs[fieldName]
			for _, tg := range tags {
				if ok {
					funcName, ok := mp[tg.FuncName]
					if ok {
						tg.errFunc = funcName
					}
				}
			}

			state := Statement{
				name: fieldName,
				tags: tags,
			}

			vf.states = append(vf.states, state)
		}
		f.methods = append(f.methods, vf)

	}
	return false
}

func splitErrorMethod(v string) (field string, method string, ok bool) {
	errorPrefix := "Error"
	if !strings.HasPrefix(v, errorPrefix) {
		return
	}

	v = strings.TrimPrefix(v, errorPrefix)
	for _, name := range libs.Validations {
		if strings.HasPrefix(v, name) {
			field = strings.TrimPrefix(v, name)
			method = name
			ok = true
			return
		}
	}
	return
}

func (f *File) funcDecl(node ast.Node) bool {
	decl, ok := node.(*ast.FuncDecl)
	if !ok {
		return true
	}
	if decl.Recv == nil || decl.Recv.List == nil || len(decl.Recv.List) == 0 || decl.Recv.List[0].Type == nil {
		return true
	}
	funcExpr := decl.Recv.List[0].Type.(*ast.StarExpr)
	recv := fmt.Sprintf("%v", funcExpr.X)

	if recv != f.modelName {
		return true
	}

	funcName := decl.Name.Name
	field, method, ok := splitErrorMethod(funcName)
	if !ok {
		return true
	}

	_, ok = f.errorFuncs[field]
	if !ok {
		f.errorFuncs[field] = make(map[string]string)
	}
	f.errorFuncs[field][method] = funcName
	return false
}

type ValidateMethod struct {
	Model  string
	states []Statement
}

func (vf *ValidateMethod) build() string {
	code := `func (obj *%v) Validate() []error {
	var err error
	var errors []error

	%v

	return errors
}`
	var states string
	for _, state := range vf.states {
		states += state.build()
	}

	return fmt.Sprintf(code, vf.Model, states)
}

type Statement struct {
	name string // name for struct field
	tags []*tag // tag list for applying this field
}

func (st *Statement) build() string {
	var code string
	for _, tg := range st.tags {
		if tg.errFunc == "" {
			code += fmt.Sprintf(`err = %v.%v(obj.%v, %#v)
			if err != nil {
				errors = append(errors, err)
			}`+"\n", packageName, tg.FuncName, st.name, tg.Param)
		} else {
			code += fmt.Sprintf(`err = %v.%v(obj.%v, %#v)
			if err != nil {
				errors = append(errors, obj.%v())
			}`+"\n", packageName, tg.FuncName, st.name, tg.Param, tg.errFunc)
		}
	}
	return code
}

type tag struct {
	Name     string // name of the tag
	FuncName string
	Param    string // parameter to send to the validation function
	errFunc  string // default: ""
}

func parseTagString(str string) ([]*tag, error) {
	tl := strings.Split(str, ",")
	tags := make([]*tag, 0, len(tl))
	for _, i := range tl {
		tg := tag{}
		v := strings.SplitN(i, "=", 2)
		tg.Name = strings.Trim(v[0], " ")
		if tg.Name == "" {
			return []*tag{}, errors.New("unknown tag")
		}
		if len(v) > 1 {
			tg.Param = strings.Trim(v[1], " ")
		}
		var found bool
		if tg.FuncName, found = libs.Validations[tg.Name]; !found {
			return []*tag{}, errors.New("unknown tag")
		}
		tags = append(tags, &tg)
	}
	return tags, nil
}

// check type-checks the package. The package must be OK to proceed.
func (pkg *Package) check(fs *token.FileSet, astFiles []*ast.File) {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{Importer: importer.Default(), FakeImportC: true, IgnoreFuncBodies: true}
	info := &types.Info{
		Defs: pkg.defs,
	}
	typesPkg, err := config.Check(pkg.dir, fs, astFiles, info)
	if err != nil {
		log.Fatalf("checking package: %s", err)
	}
	pkg.typesPkg = typesPkg
}
